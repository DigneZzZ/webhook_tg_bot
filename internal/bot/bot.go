package bot

import (
	"fmt"
	"log"
	"webhook_tg_bot/internal/ai"
	"webhook_tg_bot/internal/config"
	"webhook_tg_bot/internal/models"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type TelegramBot struct {
	bot    *tgbotapi.BotAPI
	config *config.Config
	ai     ai.AIProvider
}

func New(cfg *config.Config) (*TelegramBot, error) {
	bot, err := tgbotapi.NewBotAPI(cfg.TelegramBotToken)
	if err != nil {
		return nil, fmt.Errorf("failed to create telegram bot: %v", err)
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä
	aiProvider, err := ai.NewProvider(cfg)
	if err != nil {
		return nil, fmt.Errorf("failed to create AI provider: %v", err)
	}

	log.Printf("Authorized on account %s", bot.Self.UserName)

	return &TelegramBot{
		bot:    bot,
		config: cfg,
		ai:     aiProvider,
	}, nil
}

func (tb *TelegramBot) SendCompleteNotification(processed *models.ProcessedWebhook, isPremium bool) error {
	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ —Å –ø–æ–º–æ—â—å—é AI
	summary, err := tb.ai.GenerateSummary(processed.Content, processed.TopicTitle, processed.AuthorRole, processed.Category)
	if err != nil {
		log.Printf("Failed to generate AI summary: %v", err)
		summary = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—é–º–µ"
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è —Ä–æ–ª–∏ –∞–≤—Ç–æ—Ä–∞
	var rolePrefix string
	switch processed.AuthorRole {
	case "admin":
		rolePrefix = "üëë "
	case "moderator":
		rolePrefix = "üõ°Ô∏è "
	case "staff":
		rolePrefix = "‚≠ê "
	case "leader":
		rolePrefix = "üî• "
	default:
		rolePrefix = ""
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –Ω–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
	message := fmt.Sprintf("üë§ %s<b>%s</b> —Å–æ–∑–¥–∞–ª –Ω–æ–≤—ã–π –ø–æ—Å—Ç: <b>%s</b>\n\n"+
		"üìã %s\n\n"+
		"üîó <a href=\"%s\">–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ–º—É</a>\n\n"+
		"üè∑ –¢–µ–≥–∏: %s",
		rolePrefix,
		processed.Author,
		processed.TopicTitle,
		summary,
		processed.URL,
		formatTags(processed.Tags))

	// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
	if isPremium {
		message += "\n\nüíé <b>–î–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ.</b>\n" +
			"–û—Ñ–æ—Ä–º–∏—Ç—å VIP –º–æ–∂–Ω–æ –≤ —Ç–≥-–±–æ—Ç–µ: @gig_combot"
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º thread ID –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
	threadID := tb.config.GetThreadIDForCategory(processed.CategoryID)

	return tb.sendMessage(message, threadID)
}

func (tb *TelegramBot) sendMessage(text string, threadID int) error {
	msg := tgbotapi.NewMessage(tb.config.TelegramChatID, text)
	msg.ParseMode = "HTML"

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π thread ID, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Ä–∞–≤–µ–Ω 0
	if threadID != 0 {
		msg.ReplyToMessageID = threadID
	}

	_, err := tb.bot.Send(msg)
	if err != nil {
		return fmt.Errorf("failed to send telegram message: %v", err)
	}

	return nil
}

func formatTags(tags []string) string {
	if len(tags) == 0 {
		return "–Ω–µ—Ç"
	}

	result := ""
	for i, tag := range tags {
		if i > 0 {
			result += ", "
		}
		result += "#" + tag
	}
	return result
}
